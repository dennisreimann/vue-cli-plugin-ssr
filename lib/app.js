const express = require('express')
const { createBundleRenderer } = require('vue-server-renderer')
const { readFileSync } = require('fs')
const favicon = require('serve-favicon')
const LRU = require('lru-cache')
const compression = require('compression')
const config = require('./config')

const isProd = process.env.NODE_ENV === 'production'
const DEFAULT_OPTIONS = { prodOnly: false }

module.exports = (app, options) => {
  options = Object.assign({}, DEFAULT_OPTIONS, options)

  if (options.prodOnly && !isProd) return

  const templatePath = config.templatePath

  try {
    if (config.prependServer) {
      config.prependServer(app, options, config)
    }

    // Serve static files
    const serve = (filePath, cache) => express.static(filePath, {
      maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0,
      index: false,
    })
    app.use(compression({ threshold: 0 }))
    app.use(favicon(config.favicon))
    if (config.api.hasPlugin('pwa')) {
      app.use('/service-worker.js', serve(config.serviceWorkerPath, true))
    }
    const serveStaticFiles = serve(config.distPath, true)
    const { publicPath } = config.service.projectOptions
    app.use(publicPath, (req, res, next) => {
      if (/index\.html/g.test(req.path)) {
        next()
      } else {
        serveStaticFiles(req, res, next)
      }
    })

    // Rendering
    let renderer

    // In development: wait for webpack compilation
    // when receiving a SSR request
    let readyPromise

    const defaultRendererOptions = {
      cache: new LRU({
        max: 1000,
        maxAge: 1000 * 60 * 15,
      }),
      inject: false,
      runInNewContext: false,
      directives: config.directives,
    }

    const serverBundleName = 'vue-ssr-server-bundle'
    const clientManifestName = 'vue-ssr-client-manifest'

    if (isProd) {
      // In production: create server renderer using template and built server bundle.
      // The server bundle is generated by vue-ssr-webpack-plugin.
      const template = readFileSync(templatePath, 'utf-8')
      const serverBundle = require(`${config.distPath}/${serverBundleName}.json`)
      // The client manifests are optional, but it allows the renderer
      // to automatically infer preload/prefetch links and directly add <script>
      // tags for any async chunks used during render, avoiding waterfall requests.
      const clientManifest = require(`${config.distPath}/${clientManifestName}.json`)
      renderer = createBundleRenderer(serverBundle, {
        ...defaultRendererOptions,
        template,
        clientManifest,
      })
      app.set(serverBundleName, serverBundle)
      app.set(clientManifestName, clientManifest)
    } else {
      // In development: setup the dev server with watch and hot-reload,
      // and create a new renderer on bundle / index template update.
      const { setupDevServer } = require('./dev-server')
      readyPromise = setupDevServer({
        server: app,
        templatePath,
        onUpdate: ({ serverBundle }, options) => {
          // Re-create the bundle renderer
          renderer = createBundleRenderer(serverBundle, {
            ...defaultRendererOptions,
            ...options,
          })
          app.set(serverBundleName, serverBundle)
          app.set(clientManifestName, options.clientManifest)
        },
      })
    }

    if (config.extendServer) {
      config.extendServer(app, options, config)
    }

    // Render the Vue app using the bundle renderer
    const renderApp = (req, res) => {
      res.setHeader('Content-Type', 'text/html')

      const context = {
        req,
        httpCode: 200,
        url: req.url,
        title: config.defaultTitle,
        ...config.templateContext,
      }
      renderer.renderToString(context, (err, html) => {
        if (err || context.httpCode === 500) {
          console.error(`error during render url : ${req.url}`)

          // Render Error Page
          let errorHtml = config.error500Html
            ? readFileSync(config.error500Html, 'utf-8')
            : '500 | Internal Server Error'

          if (err) {
            console.error(err)

            if (!isProd) {
              const errorMessage = `<pre>${err.stack}</pre>`
              config.error500Html
                ? errorHtml = errorHtml.replace('<!--server-error-msg-->', errorMessage)
                : errorHtml += errorMessage
            }
          }

          res.status(500).send(errorHtml)
        } else {
          res.status(context.httpCode).send(html)
        }
      })
    }

    // Process SSR requests
    let ssr
    if (isProd) {
      ssr = renderApp
    } else {
      // In development: wait for webpack compilation
      // when receiving a SSR request
      ssr = (req, res) => {
        readyPromise.then(() => renderApp(req, res)).catch(console.error)
      }
    }
    app.get(`${publicPath}*`, (req, res, next) => {
      if (config.skipRequests(req)) {
        return next()
      }
      ssr(req, res)
    })
    return readyPromise
  } catch (e) {
    console.error(e)
  }
}
